#!/usr/bin/env node

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import { z } from "zod";
import pkg from "../package.json";

// Import tool functions
import { calculate } from "./tools/calculator.js";
import { getCurrentTime } from "./tools/time.js";
import { 
  getDatabaseSchema,
  executeSqlQuery,
  executeAiGeneratedSql,
  naturalLanguageQuery
} from "./tools/database-tools.js";

import { DatabaseManager } from "./database/manager.js";

/**
 * MCP Server for Simple Demo with Database Integration
 * 
 * This server provides:
 * - Basic utilities (time, calculator)
 * - Database operations (schema inspection, query execution)
 * - Natural language to SQL conversion
 * - Multiple output formats (table, JSON, CSV)
 */

// Create server instance
const server = new McpServer(
  {
    name: "sql-assistant-server",
    version: pkg.version,
  },
  {
    capabilities: {
      tools: {},
      resources: {},
    },
  }
);

// Initialize database connection
const dbManager = DatabaseManager.getInstance();

// Register basic tools
server.tool("get_current_time", {
  timezone: z.string().optional().describe("Timezone (optional, defaults to local)")
}, {
  title: "Get Current Time",
  description: "Get the current date and time with optional timezone support"
}, async (args) => {
  const result = getCurrentTime({ timezone: args.timezone });
  return {
    content: [{
      type: "text",
      text: result
    }]
  };
});

server.tool("calculate", {
  operation: z.enum(["add", "subtract", "multiply", "divide"]).describe("The mathematical operation to perform"),
  a: z.number().describe("First number"),
  b: z.number().describe("Second number")
}, {
  title: "Calculate",
  description: "Perform basic mathematical operations (add, subtract, multiply, divide)"
}, async (args) => {
  const result = calculate({ 
    operation: args.operation,
    a: args.a,
    b: args.b
  });
  return {
    content: [{
      type: "text",
      text: result
    }]
  };
});

// Register database tools
server.tool("get_database_schema", {
  table_name: z.string().optional().describe("Specific table name to get schema for (optional)")
}, {
  title: "Get Database Schema",
  description: "Get database schema information for all tables or a specific table"
}, async (args) => {
  const result = await getDatabaseSchema({ table_name: args.table_name });
  return {
    content: [{
      type: "text",
      text: result
    }]
  };
});

server.tool("execute_sql_query", {
  query: z.string().describe("The SQL query to execute"),
  params: z.array(z.union([z.string(), z.number(), z.boolean(), z.null()])).optional().describe("Query parameters for prepared statements"),
  format: z.enum(["table", "json", "csv"]).default("table").describe("Output format for results")
}, {
  title: "Execute SQL Query",
  description: "Execute SQL queries directly against the database with multiple output formats"
}, async (args) => {
  const result = await executeSqlQuery({
    query: args.query,
    params: args.params,
    format: args.format
  });
  return {
    content: [{
      type: "text",
      text: result
    }]
  };
});

server.tool("execute_ai_generated_sql", {
  sql_query: z.string().describe("The SQL query generated by AI to execute"),
  explanation: z.string().optional().describe("Brief explanation of what the query does"),
  format: z.enum(["table", "json", "csv"]).default("table").describe("Output format for results")
}, {
  title: "Execute AI Generated SQL",
  description: "Execute AI-generated SQL queries with explanations"
}, async (args) => {
  const result = await executeAiGeneratedSql({
    sql_query: args.sql_query,
    explanation: args.explanation,
    format: args.format
  });
  return {
    content: [{
      type: "text",
      text: result
    }]
  };
});

server.tool("natural_language_query", {
  question: z.string().describe("Natural language question about the data"),
  suggested_tables: z.array(z.string()).optional().describe("Tables that might be relevant to the query"),
  format: z.enum(["table", "json", "csv"]).default("table").describe("Output format for results")
}, {
  title: "Natural Language Query",
  description: "Convert natural language questions to SQL queries and execute them"
}, async (args) => {
  const result = await naturalLanguageQuery({
    question: args.question,
    suggested_tables: args.suggested_tables,
    format: args.format
  });
  return {
    content: [{
      type: "text",
      text: result
    }]
  };
});

// Register resources
server.resource(
  "server_info",
  "server://info",
  {
    name: "Server Information",
    description: "Information about the MCP server and its capabilities",
    mimeType: "text/plain"
  },
  async () => {
    const isDbConnected = dbManager.isConnected();
    return {
      contents: [{
        text: `Simple Demo MCP Server
Version: ${pkg.version}
Status: Running
Database Connected: ${isDbConnected}

Available Tools:
- get_current_time: Get current date/time with timezone support
- calculate: Basic mathematical operations
- get_database_schema: Database schema information
- execute_sql_query: Execute SQL queries with various output formats
- execute_ai_generated_sql: Execute AI-generated SQL with explanations
- natural_language_query: Convert natural language to SQL queries

Database Features:
- PostgreSQL/Google Cloud SQL support
- Multiple output formats (table, JSON, CSV)
- Schema discovery and exploration
- Safe query execution (SELECT only)
- Connection pooling and error handling

This server demonstrates the Model Context Protocol (MCP) with database integration capabilities.`,
        uri: "server://info",
        mimeType: "text/plain"
      }]
    };
  }
);

// Error handling
process.on('SIGINT', async () => {
  console.log('\nShutting down MCP server...');
  await dbManager.close();
  process.exit(0);
});

process.on('SIGTERM', async () => {
  console.log('\nShutting down MCP server...');
  await dbManager.close();
  process.exit(0);
});

// Start server
async function main() {
  const transport = new StdioServerTransport();
  await server.connect(transport);
  console.error("Simple Demo MCP Server running on stdio");
}

main().catch((error) => {
  console.error("Fatal error in main():", error);
  process.exit(1);
});
