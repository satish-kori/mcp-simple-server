#!/usr/bin/env node

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import { z } from "zod";
import pkg from "../package.json" with { type: "json" };

// Import database tool functions
import { 
  getDatabaseSchema,
  executeSqlQuery,
  executeAiGeneratedSql,
  naturalLanguageQuery
} from "./tools/database-tools.js";

import { DatabaseManager } from "./database/manager.js";

/**
 * PostgreSQL MCP Server
 * 
 * This server provides comprehensive PostgreSQL database integration:
 * - Database schema inspection and analysis
 * - SQL query execution with multiple output formats
 * - AI-generated SQL query execution
 * - Natural language to SQL conversion
 * - Support for multiple schemas and complex queries
 */

// Create server instance
const server = new McpServer(
  {
    name: "sql-assistant-server",
    version: pkg.version,
  },
  {
    capabilities: {
      tools: {},
    },
  }
);

// Initialize database connection
const dbManager = DatabaseManager.getInstance();

// Register database tools
server.tool("get_database_schema", {
  table_name: z.string().optional().describe("Specific table name to get schema for (optional)")
}, {
  title: "Get Database Schema",
  description: "Get database schema information for all tables or a specific table"
}, async (args) => {
  const result = await getDatabaseSchema({ table_name: args.table_name });
  return {
    content: [{
      type: "text",
      text: result
    }]
  };
});

server.tool("execute_sql_query", {
  query: z.string().describe("The SQL query to execute"),
  params: z.array(z.union([z.string(), z.number(), z.boolean(), z.null()])).optional().describe("Query parameters for prepared statements"),
  format: z.enum(["table", "json", "csv"]).default("table").describe("Output format for results")
}, {
  title: "Execute SQL Query",
  description: "Execute SQL queries directly against the database with multiple output formats"
}, async (args) => {
  const result = await executeSqlQuery({
    query: args.query,
    params: args.params,
    format: args.format
  });
  return {
    content: [{
      type: "text",
      text: result
    }]
  };
});

server.tool("execute_ai_generated_sql", {
  sql_query: z.string().describe("The SQL query generated by AI to execute"),
  explanation: z.string().optional().describe("Brief explanation of what the query does"),
  format: z.enum(["table", "json", "csv"]).default("table").describe("Output format for results")
}, {
  title: "Execute AI Generated SQL",
  description: "Execute AI-generated SQL queries with explanations"
}, async (args) => {
  const result = await executeAiGeneratedSql({
    sql_query: args.sql_query,
    explanation: args.explanation,
    format: args.format
  });
  return {
    content: [{
      type: "text",
      text: result
    }]
  };
});

server.tool("natural_language_query", {
  question: z.string().describe("Natural language question about the data"),
  suggested_tables: z.array(z.string()).optional().describe("Tables that might be relevant to the query"),
  format: z.enum(["table", "json", "csv"]).default("table").describe("Output format for results")
}, {
  title: "Natural Language Query",
  description: "Convert natural language questions to SQL queries and execute them"
}, async (args) => {
  const result = await naturalLanguageQuery({
    question: args.question,
    suggested_tables: args.suggested_tables,
    format: args.format
  });
  return {
    content: [{
      type: "text",
      text: result
    }]
  };
});

// Error handling
process.on('SIGINT', async () => {
  console.log('\nShutting down MCP server...');
  await dbManager.close();
  process.exit(0);
});

process.on('SIGTERM', async () => {
  console.log('\nShutting down MCP server...');
  await dbManager.close();
  process.exit(0);
});

// Start server
async function main() {
  const transport = new StdioServerTransport();
  await server.connect(transport);
  console.error("PostgreSQL MCP Server running on stdio");
}

main().catch((error) => {
  console.error("Fatal error in main():", error);
  process.exit(1);
});
